name: Python package

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Check-out repo and set-up python
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      # Install & configure poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      # Load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      # Install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      # Install your root project, if required
      - name: Install project
        run: poetry install --no-interaction
      # Lint with Black
      - name: Lint with Black
        uses: psf/black@stable
        with:
          options: "--check --verbose"
          src: "./poetex"
          version: "~= 22.0"
      # Run tests
      - name: Test with unittest
        run: |
          source .venv/bin/activate
          python -m unittest discover
